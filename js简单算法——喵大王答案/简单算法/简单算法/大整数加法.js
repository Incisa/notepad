// debugger

var r = bigIntAdd([1,2,3,4,5], [7,8,9])

console.log(r)

/**
 * 返回两个由数组表示的大整数的和
 * 返回结果也由数组表示
 * 例如：bigIntAdd([4,5,6,7],[6,7,8]) => []
 *
**/
function bigIntAdd(a, b) {  // 默认放进去两个数组，字符串也一样，转成数组。
  var l1 = a.length  // 数组 a 的长度
  var l2 = b.length  // 数组 b 的长度

  var l = l1 > l2 ? l1 : l2 // l 取 a , b 这两个数组最长的长度。 

  var result = [] // 新建一个空数组

  for (var i = 0; i<=l; i++) { // 一个循环，把这个空数组变成 两个相加之后最长的长度
    result[i] = 0 // 这个数组长度就是这两个数加起来之后的长度，每一位用 0 填充 。举例： [0, 0, 0, ... ,0] 这样的。
                  // 3位数与3位数相加，有可能变成4位数，所以这个用0填充的数组的长度，比 l 要大 1
  }
  console.log(result) // 打印出来看看 。就是 python 的 print('result')

  // 如下所示例子，你就是这么加的
  // 

  //                 3 4       => 5 是 这个数组的第 4 位， 4 是 这个数组的第 3 位， 1 是这个数组的第 0 位
  // a        [1,2,3,4,5]      => 相加的数组 a
  // b            [7,8,9]      => 相加的数组 b  
  // result [0,0,0,0,0,0]      => 空数组（为了进位用，实际上就是a + b + result, 有进位就在result的前一位 + 1）
  //                 1 2       => 9 是 这个数组的第 2 位， 7 是这个数组的第 0 位

  var i1, i2, i3  // 定义3个变量， i1 作为竖列相加的第一项（就是上面例子的数组第 4 位的 5）i2 作为竖列相加的第二项（就是上面例子的数组第 2 位的 9）
                  // i3 作为进位用的补充，有进位就是 1  

  var s // 作为相加的和，每一个竖列相加的和。

  for (var i = 1; i <= l; i++) { // 循环 
    i1 = l1 - i  // 数组的最后一项是数组长度减去1，倒数第二项是数组长度减去2
    i2 = l2 - i  // 同上
    i3 = l + 1 - i    // 空数组的位数，比 l 长度 大 1， 之后同上

    // 做加法 先判断是不是空，不是空则取第一个数最右边一位，然后加上第二个数的最右面一位，加上空数组的最右面一位
    s = (a[i1] === undefined ? 0 : a[i1]) + (b[i2] === undefined ? 0 : b[i2]) + result[i3]
    result[i3] = s % 10 // 加起来的和大于 10 就取余数
    result[i3 - 1] = parseInt(s/10) // 除以 10 取整，就是进位，（就是 1 ）放在 result 这个空数组的你接下来要加的那一位上面
  }
  // 就这么一直循环下去

  // 判断加起来的和到底有没有进位
  // 空数组不是为了防止多一位手动的增加了一位数么 ？
  // 4位数和4位数相加有可能变成 5 位数，但是不变成五位数的话前面不是多个 0 么？ 所以做个判断。
  if (result[0] === 0) { //假如第一位是 0
    result.shift()  // 砍下第一位是 0 的项
  }

  return result // 把这个结果输出，就是你要的结果
}